import React, { useState } from 'react'
import PropTypes from 'prop-types'
import { Grid, Button, Menu, MenuItem } from '@material-ui/core'
import { makeStyles } from '@material-ui/styles'
import InputFilter from '../FilterTypes/InputFilter'
import MenuFilter from '../FilterTypes/MenuFilter'

export const FilterTypes = {
	DATE: 'date',
	INPUT: 'input',
	MENU: 'menu',
}

/**
 * Using Material UI makeStyles to create custom classes
 */
const useStyles = makeStyles({
	queryContainer: {
		display: 'flex',
		flexWrap: 'wrap',
		justifyContent: 'left',
		alignContent: 'start',
	},
	pill: {
		backgroundColor: '#D1F6F6',
		color: '#43425D',
		margin: 0,
		marginBottom: 10,
		marginRight: 10,
		padding: 10,
		borderRadius: 4,
		alignSelf: 'center',
	},
})

/**
 * Functional React Component which allows for custom creation
 * of string Query paramaters for a GET call
 */
const Filter = ({ filterOptions, handleSearch }) => {
	// Functional State
	const [filters, setFilters] = useState([])
	const [query, setQuery] = useState()
	const [menuAnchor, setMenuAnchor] = useState()
	const [selectedFilters, setSelectedFilters] = useState([])
	const [showFilterInput, setShowFilterInput] = useState(false)
	const [showMenu, setShowMenu] = useState(false)

	// Custom Classes generated by Material UI
	const classes = useStyles()

	/**
	 * Function that toggles the showMenu state property to show
	 * or hide the Filter Menu
	 * @param {Event} event the onclick event object from which we
	 * destructure the currentTarget property
	 */
	const toggleMenu = ({ currentTarget }) => {
		// set the Material UI Menu component requires an anchor element
		setMenuAnchor(currentTarget)
		// ensure the filter input is hidden
		setShowFilterInput(false)
		// toggle the showMenu boolean flag
		setShowMenu(!showMenu)
	}

	/**
	 * Function that handles the selection of a Filter Option
	 * @param {Event} event onchange event trigger
	 * @param {Number} filterIndex the filters index corresponding to
	 * the selected option
	 */
	const handleSelectFilterOption = (event, filterIndex) => {
		event.preventDefault()
		setSelectedFilters([...selectedFilters, filterIndex])
		setShowMenu(false)
		setShowFilterInput(true)
	}

	/**
	 * Function that generates query for selected filter
	 */
	const updateQuery = (value, queryString) => {
		console.log(value)
		// first we hide the Filter Input
		setShowFilterInput(false)

		// Only add filter if it has a valid value
		if (value) {
			// if query is null this is the first value start with ?
			if (!query) {
				setQuery(`?query=${queryString}`)
			} else {
				// else we add the next item with &
				setQuery(query + ` AND ${queryString}`)
			}

			// now let's save the filter so we can display them
			const filter = filterOptions[selectedFilters[selectedFilters.length - 1]]
			setFilters([...filters, { filter, value }])
		}
	}

	return (
		<Grid container>
			<Grid item sm={9} className={classes.queryContainer}>
				{/* As filters are added, show them as pills */}
				{filters.map(({ filter, value }, index) => (
					<div key={index} className={classes.pill}>
						{filter.isMultiple && (
							<span>
								{filter.name}: {value.join(', ')}
							</span>
						)}
						{!filter.isMultiple && (
							<span>
								{filter.name}: {value}
							</span>
						)}
					</div>
				))}
				{/* The Add Filter button, hide while the user is setting a new filter */}
				{!showFilterInput && <Button onClick={toggleMenu}>+ Add Filter</Button>}
				{/* The filters Menu */}
				<Menu anchorEl={menuAnchor} open={showMenu}>
					{filterOptions.map(({ name, value }, i) => (
						<MenuItem
							key={name}
							disabled={selectedFilters.includes(i)}
							onClick={e => handleSelectFilterOption(e, i)}>
							{value}
						</MenuItem>
					))}
				</Menu>
				{/* The Filter input which allows the user to set the filter value */}
				{showFilterInput &&
					filterOptions[selectedFilters[selectedFilters.length - 1]].type ===
						FilterTypes.INPUT && (
						<InputFilter
							filter={
								filterOptions[selectedFilters[selectedFilters.length - 1]]
							}
							updateQuery={updateQuery}
						/>
					)}
				{/* The Filter input which allows the user to set the filter value */}
				{showFilterInput &&
					filterOptions[selectedFilters[selectedFilters.length - 1]].type ===
						FilterTypes.MENU && (
						<MenuFilter
							filter={
								filterOptions[selectedFilters[selectedFilters.length - 1]]
							}
							updateQuery={updateQuery}
						/>
					)}
			</Grid>
			<Grid item sm={3}>
				<Button
					variant="contained"
					color="primary"
					style={{ float: 'right' }}
					onClick={() => handleSearch(query)}>
					Search
				</Button>
			</Grid>
		</Grid>
	)
}

Filter.propTypes = {
	filterOptions: PropTypes.arrayOf(
		PropTypes.shape({
			name: PropTypes.string,
			value: PropTypes.string,
			type: PropTypes.string,
			options: PropTypes.arrayOf(PropTypes.string),
			isMultiple: PropTypes.bool,
		}),
	).isRequired,
	handleSearch: PropTypes.func.isRequired,
}

export default Filter
