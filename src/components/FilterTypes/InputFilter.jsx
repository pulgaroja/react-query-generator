import React from 'react'
import PropTypes from 'prop-types'
import { Input } from '@material-ui/core'
import { makeStyles } from '@material-ui/styles'

/**
 * Using Material UI makeStyles to create custom classes
 */
const useStyles = makeStyles({
	filterInput: {
		alignSelf: 'center',
	},
})

const InputFilter = ({ filter, updateQuery }) => {
	// Custom Classes generated by Material UI
	const classes = useStyles()

	/**
	 * Function that checks if the Enter Key is hit by the user, if
	 * so it exits (blurs) the Input
	 * @param {Event} event object fired by onKeyDown() from which
	 * we destructure the key value and grab the target object
	 */
	const handleKeyPress = ({ key, target }) => {
		if (key === 'Enter') {
			target.blur()
		}
	}

	/**
	 * Function that grabs the query value for the selected filter,
	 * triggered when the Input is blurred (exited)
	 * @param {Event} event object fired by onBlur()
	 */
	const handleQueryInput = ({ target: { value } }) => {
		// Validate and generate query string
		let param = value.trim()
		let queryString = `${filter.value}:(`

		if (filter.isMultiple) {
			param = value
				.split(',')
				.map(e => e.trim())
				.filter(e => e !== '')
			queryString += param.join(' OR ') + ')'
		} else {
			queryString += `${param})`
		}

		updateQuery(param, queryString)
	}

	return (
		<div className={classes.filterInput}>
			{filter.name}:{' '}
			<Input type="text" onKeyDown={handleKeyPress} onBlur={handleQueryInput} />
		</div>
	)
}

InputFilter.propTypes = {
	filter: PropTypes.shape({
		name: PropTypes.string,
		value: PropTypes.string,
		type: PropTypes.string,
		isMultiple: PropTypes.bool,
	}).isRequired,
	updateQuery: PropTypes.func.isRequired,
}

export default InputFilter
